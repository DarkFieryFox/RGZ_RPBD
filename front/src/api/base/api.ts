/* eslint-disable */
/// <reference path="./custom.d.ts" />
// tslint:disable
// @ts-nocheck
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}


/**
 * 
 * @export
 * @interface Schoolchilds
 */
export interface Schoolchilds {
    /**
     *
     * @type {string}
     * @memberof Schoolchilds
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof Schoolchilds
     */
    birthday?: string;
    /**
     *
     * @type {number}
     * @memberof Schoolchilds
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Schoolchilds
     */
    name?: string;
    /**
     *
     * @type {Array&lt;Parents&gt;}
     * @memberof Schoolchilds
     */
    parents?: Array<Parents>;
    /**
     *
     * @type {string}
     * @memberof Schoolchilds
     */
    patronymic?: string;
    /**
     *
     * @type {Array&lt;Progress&gt;}
     * @memberof Schoolchilds
     */
    progresss?: Array<Progress>;
    /**
     *
     * @type {string}
     * @memberof Schoolchilds
     */
    surname?: string;
    /**
     *
     * @type {number}
     * @memberof Schoolchilds
     */
    year_admission?: number;

  
}

/**
 * 
 * @export
 * @interface Parents
 */
export interface Parents {
    /**
     *
     * @type {string}
     * @memberof Parents
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof Parents
     */
    degree?: string;
    /**
     *
     * @type {number}
     * @memberof Parents
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Parents
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Parents
     */
    patronymic?: string;
    /**
     *
     * @type {string}
     * @memberof Parents
     */
    surname?: string;
}

/**
 * 
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     * 
     * @type {any}
     * @memberof ModelAndView
     */
    model?: any;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelAndView
     */
    modelMap?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndView.StatusEnum;
    /**
     * 
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}

/**
 * @export
 * @namespace ModelAndView
 */
export namespace ModelAndView {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        _100CONTINUE = <any> '100 CONTINUE',
        _101SWITCHINGPROTOCOLS = <any> '101 SWITCHING_PROTOCOLS',
        _102PROCESSING = <any> '102 PROCESSING',
        _103CHECKPOINT = <any> '103 CHECKPOINT',
        _200OK = <any> '200 OK',
        _201CREATED = <any> '201 CREATED',
        _202ACCEPTED = <any> '202 ACCEPTED',
        _203NONAUTHORITATIVEINFORMATION = <any> '203 NON_AUTHORITATIVE_INFORMATION',
        _204NOCONTENT = <any> '204 NO_CONTENT',
        _205RESETCONTENT = <any> '205 RESET_CONTENT',
        _206PARTIALCONTENT = <any> '206 PARTIAL_CONTENT',
        _207MULTISTATUS = <any> '207 MULTI_STATUS',
        _208ALREADYREPORTED = <any> '208 ALREADY_REPORTED',
        _226IMUSED = <any> '226 IM_USED',
        _300MULTIPLECHOICES = <any> '300 MULTIPLE_CHOICES',
        _301MOVEDPERMANENTLY = <any> '301 MOVED_PERMANENTLY',
        _302FOUND = <any> '302 FOUND',
        _302MOVEDTEMPORARILY = <any> '302 MOVED_TEMPORARILY',
        _303SEEOTHER = <any> '303 SEE_OTHER',
        _304NOTMODIFIED = <any> '304 NOT_MODIFIED',
        _305USEPROXY = <any> '305 USE_PROXY',
        _307TEMPORARYREDIRECT = <any> '307 TEMPORARY_REDIRECT',
        _308PERMANENTREDIRECT = <any> '308 PERMANENT_REDIRECT',
        _400BADREQUEST = <any> '400 BAD_REQUEST',
        _401UNAUTHORIZED = <any> '401 UNAUTHORIZED',
        _402PAYMENTREQUIRED = <any> '402 PAYMENT_REQUIRED',
        _403FORBIDDEN = <any> '403 FORBIDDEN',
        _404NOTFOUND = <any> '404 NOT_FOUND',
        _405METHODNOTALLOWED = <any> '405 METHOD_NOT_ALLOWED',
        _406NOTACCEPTABLE = <any> '406 NOT_ACCEPTABLE',
        _407PROXYAUTHENTICATIONREQUIRED = <any> '407 PROXY_AUTHENTICATION_REQUIRED',
        _408REQUESTTIMEOUT = <any> '408 REQUEST_TIMEOUT',
        _409CONFLICT = <any> '409 CONFLICT',
        _410GONE = <any> '410 GONE',
        _411LENGTHREQUIRED = <any> '411 LENGTH_REQUIRED',
        _412PRECONDITIONFAILED = <any> '412 PRECONDITION_FAILED',
        _413PAYLOADTOOLARGE = <any> '413 PAYLOAD_TOO_LARGE',
        _413REQUESTENTITYTOOLARGE = <any> '413 REQUEST_ENTITY_TOO_LARGE',
        _414URITOOLONG = <any> '414 URI_TOO_LONG',
        _414REQUESTURITOOLONG = <any> '414 REQUEST_URI_TOO_LONG',
        _415UNSUPPORTEDMEDIATYPE = <any> '415 UNSUPPORTED_MEDIA_TYPE',
        _416REQUESTEDRANGENOTSATISFIABLE = <any> '416 REQUESTED_RANGE_NOT_SATISFIABLE',
        _417EXPECTATIONFAILED = <any> '417 EXPECTATION_FAILED',
        _418IAMATEAPOT = <any> '418 I_AM_A_TEAPOT',
        _419INSUFFICIENTSPACEONRESOURCE = <any> '419 INSUFFICIENT_SPACE_ON_RESOURCE',
        _420METHODFAILURE = <any> '420 METHOD_FAILURE',
        _421DESTINATIONLOCKED = <any> '421 DESTINATION_LOCKED',
        _422UNPROCESSABLEENTITY = <any> '422 UNPROCESSABLE_ENTITY',
        _423LOCKED = <any> '423 LOCKED',
        _424FAILEDDEPENDENCY = <any> '424 FAILED_DEPENDENCY',
        _425TOOEARLY = <any> '425 TOO_EARLY',
        _426UPGRADEREQUIRED = <any> '426 UPGRADE_REQUIRED',
        _428PRECONDITIONREQUIRED = <any> '428 PRECONDITION_REQUIRED',
        _429TOOMANYREQUESTS = <any> '429 TOO_MANY_REQUESTS',
        _431REQUESTHEADERFIELDSTOOLARGE = <any> '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
        _451UNAVAILABLEFORLEGALREASONS = <any> '451 UNAVAILABLE_FOR_LEGAL_REASONS',
        _500INTERNALSERVERERROR = <any> '500 INTERNAL_SERVER_ERROR',
        _501NOTIMPLEMENTED = <any> '501 NOT_IMPLEMENTED',
        _502BADGATEWAY = <any> '502 BAD_GATEWAY',
        _503SERVICEUNAVAILABLE = <any> '503 SERVICE_UNAVAILABLE',
        _504GATEWAYTIMEOUT = <any> '504 GATEWAY_TIMEOUT',
        _505HTTPVERSIONNOTSUPPORTED = <any> '505 HTTP_VERSION_NOT_SUPPORTED',
        _506VARIANTALSONEGOTIATES = <any> '506 VARIANT_ALSO_NEGOTIATES',
        _507INSUFFICIENTSTORAGE = <any> '507 INSUFFICIENT_STORAGE',
        _508LOOPDETECTED = <any> '508 LOOP_DETECTED',
        _509BANDWIDTHLIMITEXCEEDED = <any> '509 BANDWIDTH_LIMIT_EXCEEDED',
        _510NOTEXTENDED = <any> '510 NOT_EXTENDED',
        _511NETWORKAUTHENTICATIONREQUIRED = <any> '511 NETWORK_AUTHENTICATION_REQUIRED'
    }
}





/**
 * 
 * @export
 * @interface Progress
 */
export interface Progress {
    /**
     *
     * @type {string}
     * @memberof Progress
     */
    classs?: string;
    /**
     *
     * @type {number}
     * @memberof Progress
     */
    exam?: number;
    /**
     *
     * @type {number}
     * @memberof Progress
     */
    finaly?: number;
    /**
     *
     * @type {number}
     * @memberof Progress
     */
    half_yearly?: number;
    /**
     *
     * @type {number}
     * @memberof Progress
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof Progress
     */
    quarter?: number;
    /**
     *
     * @type {string}
     * @memberof Progress
     */
    subject?: string;
    /**
     *
     * @type {number}
     * @memberof Progress
     */
    year?: number;
    /**
     *
     * @type {number}
     * @memberof Progress
     */
    yearly?: number;
}


/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}


/**
 * BasicErrorControllerApi - fetch parameter creator
 * @export
 */
export const BasicErrorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export const BasicErrorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingDELETE(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingHEAD(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingOPTIONS(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPATCH(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPOST(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPUT(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export const BasicErrorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingDELETE(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingHEAD(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingOPTIONS(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPATCH(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPUT(options)(fetch, basePath);
        },
    };
};

/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export class BasicErrorControllerApi extends BaseAPI {
    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingDELETE(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingDELETE(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingGET(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingHEAD(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingHEAD(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingOPTIONS(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingOPTIONS(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPATCH(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPATCH(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPOST(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPOST(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPUT(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPUT(options)(this.fetch, this.basePath);
    }

}

/**
 * SchoolchildsControllerApi - fetch parameter creator
 * @export
 */
export const SchoolchildsControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a schoolchild
         * @param {Schoolchilds} schoolchild schoolchild
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(schoolchild: Schoolchilds, options: any = {}): FetchArgs {
            // verify required parameter 'schoolchild' is not null or undefined
            if (schoolchild === null || schoolchild === undefined) {
                throw new RequiredError('schoolchild','Required parameter schoolchild was null or undefined when calling createUsingPOST1.');
            }
            const localVarPath = `/schoolchild`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Schoolchilds" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(schoolchild || {}) : (schoolchild || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a schoolchild
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE1.');
            }
            const localVarPath = `/schoolchild/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a schoolchild
         * @param {number} id id
         * @param {Schoolchilds} schoolchild schoolchild
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(id: number, schoolchild: Schoolchilds, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT1.');
            }
            // verify required parameter 'schoolchild' is not null or undefined
            if (schoolchild === null || schoolchild === undefined) {
                throw new RequiredError('schoolchild','Required parameter schoolchild was null or undefined when calling editUsingPUT1.');
            }
            const localVarPath = `/schoolchild/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Schoolchilds" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(schoolchild || {}) : (schoolchild || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all schoolchilds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchoolchildsUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/schoolchild`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolchildsControllerApi - functional programming interface
 * @export
 */
export const SchoolchildsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a schoolchild
         * @param {Schoolchilds} schoolchild schoolchild
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(schoolchild: Schoolchilds, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Schoolchilds> {
            const localVarFetchArgs = SchoolchildsControllerApiFetchParamCreator(configuration).createUsingPOST1(schoolchild, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a schoolchild
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SchoolchildsControllerApiFetchParamCreator(configuration).deleteUsingDELETE1(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a schoolchild
         * @param {number} id id
         * @param {Schoolchilds} schoolchild schoolchild
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(id: number, schoolchild: Schoolchilds, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Schoolchilds> {
            const localVarFetchArgs = SchoolchildsControllerApiFetchParamCreator(configuration).editUsingPUT1(id, schoolchild, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all schoolchilds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchoolchildsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Schoolchilds>> {
            const localVarFetchArgs = SchoolchildsControllerApiFetchParamCreator(configuration).getAllSchoolchildsUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SchoolchildsControllerApi - factory interface
 * @export
 */
export const SchoolchildsControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a schoolchild
         * @param {Schoolchilds} schoolchild schoolchild
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(schoolchild: Schoolchilds, options?: any) {
            return SchoolchildsControllerApiFp(configuration).createUsingPOST1(schoolchild, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a schoolchild
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options?: any) {
            return SchoolchildsControllerApiFp(configuration).deleteUsingDELETE1(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a schoolchild
         * @param {number} id id
         * @param {Schoolchilds} schoolchild schoolchild
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(id: number, schoolchild: Schoolchilds, options?: any) {
            return SchoolchildsControllerApiFp(configuration).editUsingPUT1(id, schoolchild, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all schoolchilds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchoolchildsUsingGET(options?: any) {
            return SchoolchildsControllerApiFp(configuration).getAllSchoolchildsUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * SchoolchildsControllerApi - object-oriented interface
 * @export
 * @class SchoolchildsControllerApi
 * @extends {BaseAPI}
 */
export class SchoolchildsControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a schoolchild
     * @param {} schoolchild schoolchild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolchildsControllerApi
     */
    public createUsingPOST1(schoolchild: Schoolchilds, options?: any) {
        return SchoolchildsControllerApiFp(this.configuration).createUsingPOST1(schoolchild, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a schoolchild
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolchildsControllerApi
     */
    public deleteUsingDELETE1(id: number, options?: any) {
        return SchoolchildsControllerApiFp(this.configuration).deleteUsingDELETE1(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a schoolchild
     * @param {} id id
     * @param {} schoolchild schoolchild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolchildsControllerApi
     */
    public editUsingPUT1(id: number, schoolchild: Schoolchilds, options?: any) {
        return SchoolchildsControllerApiFp(this.configuration).editUsingPUT1(id, schoolchild, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all schoolchilds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolchildsControllerApi
     */
    public getAllSchoolchildsUsingGET(options?: any) {
        return SchoolchildsControllerApiFp(this.configuration).getAllSchoolchildsUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * ParentsControllerApi - fetch parameter creator
 * @export
 */
export const ParentsControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a parent
         * @param {Parents} parent parent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(parent: Parents, options: any = {}): FetchArgs {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling createUsingPOST2.');
            }
            const localVarPath = `/parent`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Parents" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(parent || {}) : (parent || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a parent
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE2.');
            }
            const localVarPath = `/parent/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a parent
         * @param {number} id id
         * @param {Parents} parent parent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, parent: Parents, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT2.');
            }
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling editUsingPUT2.');
            }
            const localVarPath = `/parent/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Parents" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(parent || {}) : (parent || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all Parents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParentsUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/parent`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParentsControllerApi - functional programming interface
 * @export
 */
export const ParentsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a parent
         * @param {Parents} parent parent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(parent: Parents, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Parents> {
            const localVarFetchArgs = ParentsControllerApiFetchParamCreator(configuration).createUsingPOST2(parent, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a parent
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ParentsControllerApiFetchParamCreator(configuration).deleteUsingDELETE2(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a parent
         * @param {number} id id
         * @param {Parents} parent parent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, parent: Parents, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Parents> {
            const localVarFetchArgs = ParentsControllerApiFetchParamCreator(configuration).editUsingPUT2(id, parent, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all Parents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParentsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Parents>> {
            const localVarFetchArgs = ParentsControllerApiFetchParamCreator(configuration).getAllParentsUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ParentsControllerApi - factory interface
 * @export
 */
export const ParentsControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a parent
         * @param {Parents} parent parent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(parent: Parents, options?: any) {
            return ParentsControllerApiFp(configuration).createUsingPOST2(parent, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a parent
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options?: any) {
            return ParentsControllerApiFp(configuration).deleteUsingDELETE2(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a parent
         * @param {number} id id
         * @param {Parents} parent parent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, parent: Parents, options?: any) {
            return ParentsControllerApiFp(configuration).editUsingPUT2(id, parent, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all Parents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParentsUsingGET(options?: any) {
            return ParentsControllerApiFp(configuration).getAllParentsUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * ParentsControllerApi - object-oriented interface
 * @export
 * @class ParentsControllerApi
 * @extends {BaseAPI}
 */
export class ParentsControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a parent
     * @param {} parent parent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentsControllerApi
     */
    public createUsingPOST2(parent: Parents, options?: any) {
        return ParentsControllerApiFp(this.configuration).createUsingPOST2(parent, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a parent
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentsControllerApi
     */
    public deleteUsingDELETE2(id: number, options?: any) {
        return ParentsControllerApiFp(this.configuration).deleteUsingDELETE2(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a parent
     * @param {} id id
     * @param {} parent parent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentsControllerApi
     */
    public editUsingPUT2(id: number, parent: Parents, options?: any) {
        return ParentsControllerApiFp(this.configuration).editUsingPUT2(id, parent, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all Parents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentsControllerApi
     */
    public getAllParentsUsingGET(options?: any) {
        return ParentsControllerApiFp(this.configuration).getAllParentsUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * ProgressControllerApi - fetch parameter creator
 * @export
 */
export const ProgressControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a progress
         * @param {Progress} progress progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(progress: Progress, options: any = {}): FetchArgs {
            // verify required parameter 'progress' is not null or undefined
            if (progress === null || progress === undefined) {
                throw new RequiredError('progress','Required parameter progress was null or undefined when calling createUsingPOST5.');
            }
            const localVarPath = `/progress`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Progress" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(progress || {}) : (progress || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a progress
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE5.');
            }
            const localVarPath = `/progress/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a progress
         * @param {number} id id
         * @param {Progress} progress progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, progress: Progress, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT5.');
            }
            // verify required parameter 'progress' is not null or undefined
            if (progress === null || progress === undefined) {
                throw new RequiredError('progress','Required parameter progress was null or undefined when calling editUsingPUT5.');
            }
            const localVarPath = `/progress/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Progress" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(progress || {}) : (progress || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProgressUsingGET1(options: any = {}): FetchArgs {
            const localVarPath = `/progress`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgressControllerApi - functional programming interface
 * @export
 */
export const ProgressControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a progress
         * @param {Progress} progress progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(progress: Progress, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Progress> {
            const localVarFetchArgs = ProgressControllerApiFetchParamCreator(configuration).createUsingPOST5(progress, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a progress
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProgressControllerApiFetchParamCreator(configuration).deleteUsingDELETE5(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a progress
         * @param {number} id id
         * @param {Progress} progress progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, progress: Progress, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Progress> {
            const localVarFetchArgs = ProgressControllerApiFetchParamCreator(configuration).editUsingPUT5(id, progress, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProgressUsingGET1(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Progress>> {
            const localVarFetchArgs = ProgressControllerApiFetchParamCreator(configuration).getAllProgressUsingGET1(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProgressControllerApi - factory interface
 * @export
 */
export const ProgressControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a progress
         * @param {Progress} progress progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(progress: Progress, options?: any) {
            return ProgressControllerApiFp(configuration).createUsingPOST5(progress, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a progress
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options?: any) {
            return ProgressControllerApiFp(configuration).deleteUsingDELETE5(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a progress
         * @param {number} id id
         * @param {Progress} progress progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, progress: Progress, options?: any) {
            return ProgressControllerApiFp(configuration).editUsingPUT5(id, progress, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProgressUsingGET1(options?: any) {
            return ProgressControllerApiFp(configuration).getAllProgressUsingGET1(options)(fetch, basePath);
        },
    };
};

/**
 * ProgressControllerApi - object-oriented interface
 * @export
 * @class ProgressControllerApi
 * @extends {BaseAPI}
 */
export class ProgressControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a progress
     * @param {} progress progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgressControllerApi
     */
    public createUsingPOST5(progress: Progress, options?: any) {
        return ProgressControllerApiFp(this.configuration).createUsingPOST5(progress, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a progress
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgressControllerApi
     */
    public deleteUsingDELETE5(id: number, options?: any) {
        return ProgressControllerApiFp(this.configuration).deleteUsingDELETE5(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a progress
     * @param {} id id
     * @param {} progress progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgressControllerApi
     */
    public editUsingPUT5(id: number, progress: Progress, options?: any) {
        return ProgressControllerApiFp(this.configuration).editUsingPUT5(id, progress, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgressControllerApi
     */
    public getAllProgressUsingGET1(options?: any) {
        return ProgressControllerApiFp(this.configuration).getAllProgressUsingGET1(options)(this.fetch, this.basePath);
    }

}




